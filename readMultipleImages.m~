function output=readMultipleImages(dirc,fileFormat,bck,varargin)
%readMultipleImages converts files of desingated type into matrices. In
%   addition it can add flipped images to augment the sample and convert
%   images to LAB format.
%   Input:  dirc - directory
%           fileFormat - image files' extension
%           bck - background indices for one color channel
%           Format - output format (cell,double4D,double2D). default-cell
%           Flip - whether augment matrices by flipping images (on,off).
%                   default -off
%           Convert - converting to LAB (on,off). Default - off
%   Function is written by DN for VisRecLab
cd(dirc)
files=dir(['*.' fileFormat]);
%# define defaults at the beginning of the code so that you do not need to
%# scroll way down in case you want to change something or if the help is
%# incomplete
paramNames = {'Format','Flip','Convert'};
defaults   = {'cell','off','off'};
flipVal={'on','off'};
formatVal={'cell','double2D','double4D'};
convertVal={'on','off'};
options = struct('Format',{formatVal},'Flip',{flipVal},'Convert',{convertVal});
%# read the acceptable names
optionNames = fieldnames(options);
% loading files
for i=1:length(files)
    fileMat{i}=imread(files(i).name);
end
fileMat=fileMat'
%# count arguments
nArgs = length(varargin);
if nargin<2
    error('No image file format provided');
elseif ~nArgs & nargin<3
    output=fileMat;
elseif ~nArgs
    disp('no flipping and conversion is performed');
    output=NaN(sum(bck(:))*3,length(fileMat));
    bck=repmat(bck(:),3,1);
    for i=1:size(fileMat,1)
        temp=fileMat{i};
        temp=temp(:);
        temp=temp(bck);
        output(:,i)=temp;
    end
elseif round(nArgs/2)~=nArgs/2
    error('EXAMPLE needs propertyName/propertyValue pairs')
else
   % creating vector with pairs of method names
   for i=1:2:nArgs
       args{i,1}=lower(varargin{i});
       args(i,2}=lower(varargin{i+1});
   end
 % checking Convert
   checkVar=lower('Convert');
   if any(strcmp(args,checkVar))
       indTemp=strcmp(args,checkVar);
       valTemp=args{indTemp,2};
       args(valTemp,:)=[];
       switch valTemp
           case 'on'
               for i=1:size(fileMat,1)
                   fileMat{i}=rgb2lab(fileMat{i});
               end
           case 'off'
               disp('No LAB convesion was requested')
       end
   else
       disp('No LAB convesion was requested')
   end
% checking flip
    checkVar=lower('Flip');
   if any(strcmp(args,checkVar))
       indTemp=strcmp(args,checkVar);
       valTemp=args(indTemp,2};
       args(valTemp,:)=[];
       switch valTemp
           case 'on'
               for i=1:size(fileMat,1)
                   fileMat{i+size(fileMat,1)}=fliplr(fileMat{i});
               end
           case 'off'
               disp('No flipping augmentation was requested')
       end
   else
       disp('No flipping augmentation was requested')
   end   
           
   % checking format
    checkVar=lower('Format');
   if any(strcmp(args,checkVar))
       indTemp=strcmp(args,checkVar);
       valTemp=args(indTemp,2};
       args(valTemp,:)=[];
       switch valTemp
           case 'cell'
               output=fileMat;
           case 'double4D'
               for i=1:size(fileMat,1)
                   output(:,:,:,i)=fileMat{
               
           case 'off'
               disp('No flipping augmentation was requested')
       end
   else
       disp('No flipping augmentation was requested')
   end       
    
    
    
    
    
    
    
    for pair = reshape(varargin,2,[]) %# pair is {propName;propValue}
        inpName = lower(pair{1}); %# make case insensitive
        
        if any(strcmp(inpName,optionNames))
            %# overwrite options. If you want you can test for the right class here
            %# Also, if you find out that there is an option you keep getting wrong,
            %# you can use "if strcmp(inpName,'problemOption'),testMore,end"-statements
            if strcmp(inpName,'flip')
                if strcmp(pair{2},'on')
                    for i=1:length(files)
                        temp=imread(files(i).name);
                        %                     temp=rgb2lab(temp);
                        matIm{i}=temp;
                        matIm{i+length(files)}=fliplr(temp);
                    end
                    output=matIm';
                elseif strcmp(pair{2},'off')
                    for i=1:length(files)
                        temp=imread(files(i).name);
                        matIm{i}=temp;
                    end
                    output=matIm';
                else error ('The value for flip is not defined correctly');
                end
            end
            if strcmp(inpName,'format')
                if strcmp(pair{2},'cell')
                    if isempty(output)
                        for i=1:length(files)
                            temp=imread(files(i).name);
                            matIm{i}=temp;
                        end
                        output=matIm';
                    else
                    end
                elseif strcmp(pair{2},'double2D')
                    if isempty(output)
                        output=NaN(sum(bck(:))*3,length(files));
                        bck=repmat(bck(:),3,1);
                        for i=1:length(file)
                            temp=imread(files(i).name);
                            temp=temp(:);
                            temp=temp(bck);
                            output(:,i)=temp;
                        end
                    else
                        out=output;
                        output=NaN(sum(bck(:))*3,length(files));
                        bck=repmat(bck(:),3,1);
                        for i=1:length(out)
                            temp=out{i};
                            temp=temp(:);
                            temp=temp(bck);
                            output(:,i)=temp;
                        end
                    end
                elseif strcmp(pair{2},'double4D')
                    if isempty(output)
                        for i=1:length(file)
                            temp=imread(files(i).name);
                            output(:,:,:,i)=temp;
                        end
                    else
                        out=output;
                        output=[];
                        for i=1:length(out)
                            temp=out{i};
                            output(:,:,:,i)=temp;
                        end
                    end
                else error ('The value for format is not defined correctly');
                end
            end
        else
            error('%s is not a recognized parameter name',inpName)
        end
        
    end
end
